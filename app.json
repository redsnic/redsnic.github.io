[{"name": "app.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import ui, render, App, reactive\nfrom shiny.types import ImgData\n\n# Create some random data\nt = np.linspace(0, 2 * np.pi, 1024)\ndata2d = np.sin(t)[:, np.newaxis] * np.cos(t)[np.newaxis, :]\n\napp_ui = ui.page_fixed(\n    ui.HTML('<img src=\"https://ethz.ch/staffnet/de/service/kommunikation/corporate-design/logo/_jcr_content/par/image_65377674/image.imageformat.1286.403278616.png\" alt=\"ETH logo\", height=\"50px\">'),\n    ui.HTML('<hr>'),\n    ui.h1(\"How to pimp your dragon\"),\n    ui.HTML('<hr>'),\n    ui.markdown(\"\"\"\n        Use this interface to tune the environment of your dragon. When you are done press the 'Generate' button to see what happens!\n\n        This is a list \n        * a \n        * b \n        * c \n        * d\n    \"\"\"),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_radio_buttons(\"env\", \"Target environment\",\n                dict(forest=\"forest\", ocean=\"ocean\", volcano=\"volcano\", desert='desert')\n            ),\n            ui.input_radio_buttons(\"subtype\", \"Target subtype\",\n                dict(forest=\"feathered\", ocean=\"scaled\")\n            ),\n            ui.input_slider(\"f_hot\", \"F-hot\", 0, 1, value=0, step=0.01),\n            ui.input_slider(\"humidity\", \"Humidity exposure\", 0, 1, value=0, step=0.01),\n            ui.input_slider(\"thermocline\", \"Thermocline\", 0, 1, value=0, step=0.01),\n            ui.input_slider(\"diet\", \"Diet\", 0, 1, value=0, step=0.01),\n            ui.input_slider(\"sunscreen\", \"Light exposure\", 0, 1, value=0, step=0.01),\n            ui.input_action_button(\"run\", \"Compute dynamics\"),\n            ui.HTML('<hr>'),\n            ui.input_action_button(\"show\", \"Show dragon\", class_=\"btn-primary\"),\n            \n        ),\n        ui.panel_main(\n            #ui.HTML('<h3>System\\' dynamics</h3>'),\n            ui.output_plot(\"plot\", height = '100%'),\n            #ui.HTML('<hr>'),\n            #ui.output_ui(\"dragon_image\"),\n            #ui.output_ui(\"open_dialog\")\n        )\n    ),\n    ui.HTML('<hr>'),\n    ui.HTML('Scientifica 2023 - CTSB group, D-BSSE'),\n    ui.HTML('<br>'),\n    ui.HTML('<br>')\n)\n\n\n   \n\n\ndef server(input, output, session):\n\n\n    @output\n    @render.plot\n    @reactive.event(input.subtype, input.run, input.env, ignore_none=True)\n    def plot():\n        # extra\n        import numpy as np\n        import matplotlib.pyplot as plt\n\n        # general Euler method implementation\n        def euler_np(x_0, derivative, step, finalTime):\n            x = x_0\n            while finalTime > 0:\n                x = x + step*derivative(x) # single step\n                finalTime -= step\n            return x\n\n        def euler_step(x, derivative, step_size):\n            return x + step_size*derivative(x) # single step\n\n        I = {\n            \"red\" : 0,\n            \"yellow\" : 1,\n            \"blue\" : 2,\n            \"green\" : 3,\n            \"fur\" : 4,\n            \"feathers\" : 5,\n            \"scales\" : 6\n        }\n\n        # TODO decide many setpoints...\n        setpoints = {\n            \"red\" : (0.3, 0.4),\n            \"yellow\" : (0.2, 0.5),\n            \"blue\" : (0.15, 0.18),\n            \"green\" : (0.5, 0.3),\n            \"fur\" : (0.1, 0.2),\n            \"feathers\" : (0.3, 0.4),\n            \"scales\" : (0.12, 0.2),\n        }\n\n        colors = {\n            \"red\" : \"C0\",\n            \"yellow\" : \"C1\",\n            \"blue\" : \"C2\",\n            \"green\" : \"C3\",\n            \"fur\" : \"C0\",\n            \"feathers\" : \"C1\",\n            \"scales\" : \"C2\"\n        }\n\n\n        delta = 1 \n        kappa = 0.3\n        k1 = 1\n        k2 = 1\n\n        def system(x):\n            y = np.zeros_like(x)\n            # y = x\n            y[I[\"red\"]] = input.f_hot() - delta*x[I[\"red\"]]\n            y[I[\"yellow\"]] = input.thermocline() - delta*x[I[\"yellow\"]] - x[I[\"yellow\"]] * x[I[\"blue\"]]\n            y[I[\"blue\"]] = input.humidity() - delta*x[I[\"blue\"]] - x[I[\"yellow\"]] * x[I[\"blue\"]]\n            y[I[\"green\"]] = x[I[\"yellow\"]] * x[I[\"blue\"]] - delta*x[I[\"green\"]]\n            #\n            y[I[\"fur\"]] = k1 * (kappa/(kappa + x[I[\"red\"]] + x[I[\"yellow\"]] + x[I[\"blue\"]] + x[I[\"green\"]])) - delta*x[I[\"fur\"]]\n            y[I[\"feathers\"]] = x[I[\"green\"]] - delta*x[I[\"feathers\"]]\n            y[I[\"scales\"]] = x[I[\"red\"]]*x[I[\"yellow\"]]*x[I[\"blue\"]]*k2 - delta * x[I[\"scales\"]]\n            return y\n\n        x_0 = np.array([0,0,0,0,0,0,0])\n\n        euler_np(x_0, system, 0.01, 1)\n\n        xs = [x_0]\n        ts = 0.01\n        size = 1000\n        for i in range(size-1):\n            xs.append(euler_step(xs[-1], system, ts))\n\n        fig, (ax1, ax2) = plt.subplots(2)\n\n        for l in [\"red\", \"blue\", \"yellow\", \"green\"]:\n            i = I[l]\n            ax1.plot(np.linspace(0,1,size), [ x[i] for x in xs], label=f\"{l}\", color=colors[l])\n            ax1.hlines(sum(setpoints[l])/2, 0, 1, color=colors[l], linestyle=\"dotted\")\n            ax1.axhspan(setpoints[l][0], setpoints[l][1], 0, 1, facecolor=colors[l], alpha=0.01)\n\n        for l in [\"fur\", \"feathers\", \"scales\"]:\n            i = I[l]\n            ax2.plot(np.linspace(0,1,size), [ x[i] for x in xs], label=f\"{l}\", color=colors[l])\n            ax2.hlines(sum(setpoints[l])/2, 0, 1, color=colors[l], linestyle=\"dotted\")\n            ax2.axhspan(setpoints[l][0], setpoints[l][1], 0, 1, facecolor=colors[l], alpha=0.01)\n\n        fig.suptitle(\"System's dynamics\")\n        ax1.set_xlabel(\"Time\")\n        ax1.set_ylabel(\"Concentrations\")\n        ax1.legend()\n        ax2.set_xlabel(\"Time\")\n        ax2.set_ylabel(\"Concentrations\")\n        ax2.legend()\n        return fig   \n\n    @reactive.Effect\n    @reactive.event(input.show, ignore_none=True)\n    def _():\n        m = ui.modal(\n            ui.HTML('<div style=\"text-align:center\"><h3></h3><img src=\"https://media.istockphoto.com/id/494839519/vector/knight-fighting-dragon.jpg?s=612x612&w=0&k=20&c=GUnR0APRVkiuFiREW2Psr0CkBKDaK6Bkkes5mmXENYQ=\" alt=\"dragon\" style=\"width:80%;text-align:center;height:90%\"></div>'),\n            title=\"Here is your dragon!\",\n            easy_close=True,\n            footer=None,\n            size='xl'\n        )\n        ui.modal_show(m) \n\n\napp = App(app_ui, server)", "type": "text"}, {"name": "www/images/test.png", "content": "", "type": "binary"}]