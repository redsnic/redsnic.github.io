[{"name": "app.py", "content": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom shiny import ui, render, App, reactive\nfrom shiny.types import ImgData\nfrom shinywidgets import output_widget, render_widget\nfrom htmltools import TagList\n\n# Create some random data\n\nkwargs = {\n    \"class\" : \"maindiv\"\n}\n\nlanguage = \"en\"\n\nlocale = {\n#### ENGLISH TRANSLATION ####\n    \"en\" : {\n        \"title\" : \"How to pimp your dragon\",\n        # main_text is in markdown format\n        \"main_text\" : \"\"\" \nSome scientist have discovered that dragon eggs can be exposed to different conditions to make the newborn dragons perfectly adapted to \ndifferent natural enviroment. Even though they understood the principle of the conditions that should be met, they still don't know how to handle the eggs\nproperly. Can you help them?\n        \nYou have recieved a note with some instructions on how to use the dragon egg incubator interface:\n        \n1. Set up the target environment in the **Environment** section. This will help you understand the target expression the genes. \n2. The **Incubator controls** panel provides you with access to the working parameters for the egg's environment. Your goal is to find the right ones so that the egg will hatch!\n3. Once you are done setting the parameters, you can use the **Start incubation** button to apply them. You will observe how the expression of the genes will\n    change immediately in the **Monitor** section. The intervals show the target expression that you should reach for each gene at the final time.\n4. By clicking the **Check your egg** button, you can see if you managed to hatch the egg and, if that is the case, see the dragon itself!\n5. For each environment there is an hidden dragon variant that you can find by playing with the parameters. Can you follow the hints and find them all?\n\nTime to get to work!   \n        \"\"\",\n        \"env_selector\" : dict(forest=\"forest\", ocean=\"ocean\", volcano=\"volcano\", desert='desert', arctic=\"arctic\"),\n        \"incubator_UI\" : dict(\n            title=\"Incubator controls\",\n            f_hot=\"Incubation temperature (Celsius)\",\n            humidity=\"Humidity (%)\",\n            thermocline=\"Day/Night temperature difference (0 to 1)\",\n            diet=\"Nutrient supplement (Kcal)\",\n            sunscreen=\"Light exposure (0 total darkness, 1 full lighting)\",\n            run=\"Start incubation\",\n            show=\"Check your egg\"\n        ),\n        \"monitor_UI\" : dict(\n            title=\"Gene expression monitor\",\n        ),\n        \"monitor_plots\" : dict(\n            time=\"Time\",\n            expression=\"Expression level\",\n        ),\n        \"colors/features\" : dict(\n            red=\"Red color gene\",\n            yellow=\"Yellow color gene\",\n            blue=\"Blue color gene\",\n            green=\"Green color gene\",\n            fur=\"Fur growth factor\",\n            feathers=\"Feathers growth factor\",\n            scales=\"Scale growth factor\",\n        ),\n        \"modal\" : dict(\n            success=\"Congratulations! Here is your dragon!\",\n            failure=\"Too bad, the egg didn't hatch! Try again!\",\n            special=\"Wow! You found a secret dragon!\",\n            info=\"Press outside of the box to return to the incubator settings.\",\n        ),\n        \"environments\" : dict(\n            title = \"Target environment\",            \n            volcano = \"Volcano dragons can cope with extreme high temperatures. Their coulour helps them to blend in with the lava. There is a rumor that some of them live in caves hidden within volcanos, where nothing else can survive [Secret].\",\n            forest  = \"Forest dragons are adapted to live among the vegetation of their habitat. Their green colour helps them to blend in with the leaves. It is said that some variants can produce only green pigments [Secret].\",\n            ocean   = \"Ocean dragons live both over and under water and they are always blue in color. \\n Some of them have a balanced amount of scales and fur, but this combination also changes their shape [Secret].\",\n            desert  = \"Desert dragons can survive the hostile conditions of the desert. Based on the pigments they express, some of them can look like sand, while others have a metallic appearance that resembles copper [Secret].\",\n            arctic  = \"Artic dragons can only survive at sub-zero temperatures. They are usually white, but some of them can express a small amount of blue pigments to seem as made of ice [Secret].\",\n        ),\n    },\n#### GERMAN TRANSLATION ####\n    \"de\" : { # TODO\n        \"title\" : \"How to pimp your dragon\",\n        # main_text is in markdown format\n        \"main_text\" : \"\"\" \nWissenschaftler haben herausgefunden, dass Dracheneier verschiedenen Bedingungen ausgesetzt werden k\u00f6nnen, um die neugeborenen Drachen perfekt an unterschiedliche Umgebungen anzupassen.\nAber selbst wenn sie im Prinzip verstanden haben, was das Endresultat sein soll, wissen sie immer noch nicht, wie sie die Eier ausbrueten m\u00fcssen um die entsprechenden\nResultate zu erreichen. \nKannst du ihnen helfen? \nDu hast eine Nachricht mit einigen Anweisungen zur Verwendung des Drachenei-Brutschranks erhalten: \n\n1. W\u00e4hle die Zielumgebung im Abschnitt **Umgebung** aus. Dann werden dir die Ziel-Level der Gene angezeigt. \n2. \u00dcber das Bedienfeld **Inkubatorsteuerung** hast du Zugriff auf die Einstellungen f\u00fcr die Umgebung des Eies. Dein Ziel ist es, die richtigen zu finden, damit das Ei schl\u00fcpfen kann! \n3. Sobald du mit dem Einstellen der Parameter fertig bist, kannst du die Schaltfl\u00e4che **Inkubation starten** verwenden, um sie anzuwenden. Im Abschnitt **Beobachtung** kannst du dann die Auswirkungen der Bruteinstellungen auf die Genablesung sehen. Die markierten Intervalle zeigen die Ziellevel an, die du f\u00fcr jedes Gen erreichen solltest. \n4. Mit der Schaltfl\u00e4che **\u00dcberpr\u00fcfe dein Ei** kannst du sehen, ob du es geschafft hast, das Ei auszubr\u00fcten, und wenn das der Fall ist, auch den Drachen selbst! \n5. F\u00fcr jede Umgebung gibt es eine versteckte Drachenvariante, die du finden kannst, indem du mit den Einstellungen spielst. Kannst du den Hinweisen folgen und sie alle finden?\n\nMach dich an die Arbeit und hilf den Wissenschaftlern die Drachen anzupassen!\n        \"\"\",\n        \"env_selector\" : dict(forest=\"Wald\", ocean=\"Ozean\", volcano=\"Vulkan\", desert='W\u00fcste', arctic=\"Arktis\"),\n        \"incubator_UI\" : dict(\n            title=\"Brutschrankparameter\",\n            f_hot=\"Temperatur (Celsius)\",\n            humidity=\"Luftfeuchtigkeit (%)\",\n            thermocline=\"Temperaturunterschied Tag/Nacht (0 to 1)\",\n            diet=\"N\u00e4hrstoffe (Kcal)\",\n            sunscreen=\"Licht (0 komplette Dunkelheit, 1 helles Licht)\",\n            run=\"Ausbr\u00fcten\",\n            show=\" \u00dcberpr\u00fcfe dein Ei\"\n        ),\n        \"monitor_UI\" : dict(\n            title=\"Proteinlevel-Anzeige\",\n        ),\n        \"monitor_plots\" : dict(\n            time=\"Zeit\",\n            expression=\"Proteinlevel\",\n        ),\n        \"colors/features\" : dict(\n            red=\"Gen f\u00fcr rote Farbe\",\n            yellow=\"Gen f\u00fcr gelbe Farbe\",\n            blue=\"Gen f\u00fcr blaue Farbe\",\n            green=\"Gen f\u00fcr gr\u00fcne Farbe\",\n            fur=\"Gen f\u00fcr Fell\",\n            feathers=\"Gen f\u00fcr Federn\",\n            scales=\"Gen f\u00fcr Schuppen\",\n        ),\n        \"modal\" : dict(\n            success=\"Herzlichen Gl\u00fcckwunsch! Hier ist dein Drache!\",\n            failure=\"Schade, dein Drache ist nicht geschl\u00fcpft. Versuche es noch einmal!\",\n            special=\"Wow! Du hast einen geheimen Drachen gefunden!\",\n            info=\"Klicke ausserhalb des Bildes um zu den Brutkasteneinstellungen zur\u00fcckzugelangen.\",\n        ),\n        \"environments\" : dict(\n            title = \"Zielumgebung\",            \n            volcano = \"Vulkandrachen k\u00f6nnen mit extrem hohen Temperaturen umgehen. Ihre Farbe hilft ihnen, mit der Lava zu verschmelzen. Es geht das Ger\u00fccht um, dass einige von ihnen in H\u00f6hlen leben, die in Vulkanen versteckt sind, wo nichts anderes \u00fcberleben kann [Geheimtipp].\",\n            forest  = \"Walddrachen sind an die Vegetation ihres Lebensraums angepasst. Ihre gr\u00fcne Farbe hilft ihnen, mit den Bl\u00e4ttern zu verschmelzen. Es wird gesagt, dass einige Varianten nur gr\u00fcne Pigmente erzeugen k\u00f6nnen [Geheimtipp].\",\n            ocean   = \"Ozeandrachen leben sowohl \u00fcber als auch unter Wasser und haben immer eine blaue Farbe. \\n Einige von ihnen haben eine ausgewogene Menge an Schuppen und Fell, aber diese Kombination ver\u00e4ndert auch ihre Form [Geheimtipp].\",\n            desert  = \"W\u00fcstendrachen k\u00f6nnen die lebensfeindlichen Bedingungen der W\u00fcste \u00fcberleben. Aufgrund ihrer Pigmente k\u00f6nnen einige von ihnen wie Sand aussehen, w\u00e4hrend andere ein metallisches Aussehen haben, das Kupfer \u00e4hnelt [Geheimtipp].\",\n            arctic  = \"Polardrachen k\u00f6nnen nur bei Minusgraden \u00fcberleben. Sie sind normalerweise wei\u00df, aber einige von ihnen k\u00f6nnen eine kleine Menge blauer Pigmente ausdr\u00fccken, um den Anschein zu erwecken, als w\u00e4ren sie aus Eis [Geheimtipp].\",\n        ),\n    },\n}\n\napp_ui = ui.page_fixed(\n    ui.tags.style(\n        \"\"\"\n        body {\n            background-image: url(https://img.freepik.com/premium-vector/japanese-vintage-elements-seamless-pattern-with-angry-poisonous-snake-dangerous-fantasy-dragon-chrysanthemum-sakura-flowers_225004-2582.jpg)\n        }\n        div {\n            background-color: #FFFFFF\n        }\n        .maindiv {\n            opacity:1;color:black;box-shadow:0px 0px 20px 20px #888888;background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\n        }\n        .modal.show{\n            background-image: url(https://img.freepik.com/premium-vector/japanese-vintage-elements-seamless-pattern-with-angry-poisonous-snake-dangerous-fantasy-dragon-chrysanthemum-sakura-flowers_225004-2582.jpg)\n        }\n        .modal-content{\n            border-color:#444444;border-width:2px;border-style:solid;opacity:1;color:black;box-shadow:0px 0px 20px 20px #888888;\n        }\n         /* Dropdown Button (from w3school)*/\n        .dropbtn {\n        background-color: #4287f5;\n        color: white;\n        padding: 16px;\n        font-size: 16px;\n        border: none;\n        width: 100%;\n        }\n\n        /* The container <div> - needed to position the dropdown content */\n        .dropdown {\n        position: absolute;\n        display: inline-block;\n        }\n\n        /* Dropdown Content (Hidden by Default) */\n        .dropdown-content {\n        display: none;\n        position: absolute;\n        background-color: #f1f1f1;\n        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n        z-index: 1;\n        }\n\n        /* Links inside the dropdown */\n        .dropdown-content a {\n        color: black;\n        padding: 12px 16px;\n        text-decoration: none;\n        display: block;\n        }\n\n        /* Change color of dropdown links on hover */\n        .dropdown-content a:hover {background-color: #ddd;}\n\n        /* Show the dropdown menu on hover */\n        .dropdown:hover .dropdown-content {display: block; z-index: 1; position:fixed; width:inherit}\n\n        /* Change the background color of the dropdown button when the dropdown content is shown */\n        .dropdown:hover .dropbtn {background-color: #214382;} \n        \"\"\"\n    ),\n    ui.HTML('<br>'),\n    ui.HTML('<div>'),\n    ui.HTML('<div style=\"overflow:hidden;background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\">'),\n    ui.HTML('<div style=\"width: 80%;position:relative; float:left; background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\">'),\n    ui.HTML('<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/99/ETH_Z%C3%BCrich_Logo_black.svg/1024px-ETH_Z%C3%BCrich_Logo_black.svg.png\" alt=\"ETH logo\", height=\"50px\">'),\n    ui.HTML('</div>'),\n    #ui.HTML('<div style=\"width: 20%;position:relative; float:right;background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\">'),\n    ui.HTML(\"\"\"\n        \n        <div class=\"dropdown\">\n        <button class=\"dropbtn\">Language/Sprache</button>\n        <div class=\"dropdown-content\" style=\"width:inherit; position:relative\">\n            <a href=\"/eng/index.html\">English</a>\n            <a href=\"/ger/index.html\">Deutsch</a>\n        </div>\n        </div>\n            \n            \"\"\"),\n    ui.HTML('</div>'),\n    #ui.HTML('</div>'),\n    ui.HTML('</div>'),\n    ui.HTML('<hr>'),\n    ui.HTML(f\"<H1><b>{locale[language]['title']}</b></H1>\"),\n    ui.HTML('<hr>'),\n    ui.markdown(locale[language][\"main_text\"]),\n    ui.HTML(\"<hr>\"),\n    ui.HTML(f'<h4>{locale[language][\"environments\"][\"title\"]}</h4>'),\n    ui.input_select(\"env\", None,\n                dict(forest=locale[language][\"env_selector\"][\"forest\"], ocean=locale[language][\"env_selector\"][\"ocean\"], volcano=locale[language][\"env_selector\"][\"volcano\"], desert=locale[language][\"env_selector\"][\"desert\"], arctic=locale[language][\"env_selector\"][\"arctic\"])\n            ),\n    ui.output_text(\"dragon_description\", inline=True),\n    ui.HTML('<hr>'),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.HTML(f'<h3>{locale[language][\"incubator_UI\"][\"title\"]}</h3>'),\n            #ui.HTML('<hr>'),\n            ui.input_slider(\"f_hot\", locale[language][\"incubator_UI\"][\"f_hot\"], 0, 50, value=36, step=50/100),\n            ui.input_slider(\"humidity\", locale[language][\"incubator_UI\"][\"humidity\"], 0, 100, value=30, step=1),\n            ui.input_slider(\"thermocline\", locale[language][\"incubator_UI\"][\"thermocline\"], 0, 1, value=0.5, step=0.01),\n            ui.input_slider(\"diet\", locale[language][\"incubator_UI\"][\"diet\"], 0, 2000, value=600, step=2000/100),\n            ui.input_slider(\"sunscreen\", locale[language][\"incubator_UI\"][\"sunscreen\"], 0, 1, value=0.5, step=0.01),\n            ui.input_action_button(\"run\", locale[language][\"incubator_UI\"][\"run\"]),\n            ui.HTML('<hr>'),\n            ui.input_action_button(\"show\", locale[language][\"incubator_UI\"][\"show\"], class_=\"btn-primary\"),\n        ),\n        ui.panel_main(\n            ui.HTML(f'<h3>{locale[language][\"monitor_UI\"][\"title\"]}</h3>'),\n            ui.output_plot(\"plot\", height = '100%'),\n            style=\"border-color:#444444;border-width:2px;border-style:solid;box-shadow:5px 0px 5px -5px #AAAAAA;\",\n        )\n    ),\n    ui.HTML('<hr>'),\n    ui.HTML('<p style=\"color:#555555\">Scientifica 2023 - CTSB group, D-BSSE</p>'),\n    ui.HTML('<br>'),\n    **kwargs\n    \n)\n\nI = {\n    \"red\" : 0,\n    \"yellow\" : 1,\n    \"blue\" : 2,\n    \"green\" : 3,\n    \"fur\" : 4,\n    \"feathers\" : 5,\n    \"scales\" : 6\n}\n\nsetpoints_dict = {}\nsetpoints_dict[\"volcano\"] = {\n    \"red\" : (0.7, 0.9),\n    \"yellow\" : (0.2, 0.6),\n    \"blue\" : (0.0, 0.1),\n    \"green\" : (0.0, 0.1),\n    \"fur\" : (0.0, 0.1),\n    \"feathers\" : (0.0, 0.1),\n    \"scales\" : (0.6, 0.8),\n}\nsetpoints_dict[\"forest\"] = {\n    \"red\" : (0.2, 0.3),\n    \"yellow\" : (0.0, 0.1),\n    \"blue\" : (0.175, 0.25),\n    \"green\" : (0.4, 0.6),\n    \"fur\" : (0.0, 0.1),\n    \"feathers\" : (1.1, 1.25),\n    \"scales\" : (0.5, 0.7),\n}\nsetpoints_dict[\"ocean\"] = {\n    \"red\" : (0., 0.1),\n    \"yellow\" : (0.00, 0.1),\n    \"blue\" : (0.35, 0.45),\n    \"green\" : (0.0, 0.1),\n    \"fur\" : (0.1, 0.3),\n    \"feathers\" : (0.05, 0.15),\n    \"scales\" : (0.6, 0.8),\n}\nsetpoints_dict[\"desert\"] = {\n    \"red\" : (0.2, 0.9),\n    \"yellow\" : (0.8, 1),\n    \"blue\" : (0., 0.3),\n    \"green\" : (0., 0.3),\n    \"fur\" : (0., 0.1),\n    \"feathers\" : (0., 0.1),\n    \"scales\" : (0.2, 0.4),\n}\nsetpoints_dict[\"arctic\"] = {\n    \"red\" : (0.0, 0.1),\n    \"yellow\" : (0.0, 0.1),\n    \"blue\" : (0.0, 0.2),\n    \"green\" : (0.0, 0.1),\n    \"fur\" : (0.25, 0.35),\n    \"feathers\" : (0., 0.1),\n    \"scales\" : (0.0, 0.1),\n}\n\nsetpoints_dict_alt = {} # TODO\nsetpoints_dict_alt[\"volcano\"] = { # diamond/crystal dragon\n    \"red\" : (0., 0.1),     # what if the dragon was in a cave within his volcano?\n    \"yellow\" : (0., 0.1),\n    \"blue\" : (0.0, 0.1),\n    \"green\" : (0.0, 0.1),\n    \"fur\" : (0.0, 0.1),\n    \"feathers\" : (0.0, 0.1),\n    \"scales\" : (0., 0.1),  # bring everythin to <0.1\n}\nsetpoints_dict_alt[\"forest\"] = { # leaf/wood dragon\n    \"red\" : (0., 0.1), # what if we would use only the green pigment?\n    \"yellow\" : (0.0, 0.1),\n    \"blue\" : (0.0, 0.1), #\n    \"green\" : (0.8, 1), #\n    \"fur\" : (0.0, 0.1),\n    \"feathers\" : (1.1, 1.25),\n    \"scales\" : (0., 0.1),\n}\nsetpoints_dict_alt[\"ocean\"] = { # asian dragon\n    \"red\" : (0., 0.1),  # what would happen if we balanced fur and scales while keeping the blue pigment?\n    \"yellow\" : (0.0, 0.1),\n    \"blue\" : (0.15, 0.5),\n    \"green\" : (0.0, 0.1),\n    \"fur\" : (0.3, 0.5), # balance fur/feathers/scales\n    \"feathers\" : (0., 0.1), \n    \"scales\" : (0.3, 0.5), \n}\nsetpoints_dict_alt[\"desert\"] = { # copper dragon\n    \"red\" : (0.9, 1), # what if both red and yellow pigments were maximally expressed?\n    \"yellow\" : (0.8, 1),\n    \"blue\" : (0., 0.3),\n    \"green\" : (0., 0.3),\n    \"fur\" : (0., 0.1),\n    \"feathers\" : (0., 0.1),\n    \"scales\" : (0.2, 0.4),\n}\nsetpoints_dict_alt[\"arctic\"] = { # ice dragon\n    \"red\" : (0.0, 0.1),  # what if we add some blue pigment while removing fur, feathers and scales?\n    \"yellow\" : (0.0, 0.1),\n    \"blue\" : (0.1, 0.3), # we want some blue \n    \"green\" : (0.0, 0.1),\n    \"fur\" : (0., 0.1),   # but very little of all other genes\n    \"feathers\" : (0., 0.1),\n    \"scales\" : (0.0, 0.1),\n}\n\ndragon_urls = {\n    \"volcano\" : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-zyuwT1Zz9rs90pQhfxeGu7kIsyK_uuiUi3S4r72TguQjGKB56oR3m4s2ZNpwBKXvoDeksjORnuK9ByW02egLpGli-Yjg=s1600\",\n    \"forest\"  : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-zMnjWPE-ls0BVlyXZj6_A7X_YLP_OL7cRNoGdluuRQSPGySLcP2nKw9Ms4MtHsKeFTfWabRx2O2Mvs3CNLl6cyk5HIWw=s1600\",\n    \"ocean\"   : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-wOxMaSDFnUsLGHjqpl1pcCA9U-gpLNQl8lMa0C9xBRYnrE0sEqY_ROmUw97aCRTm1PXDkFCkEUENjZn-iHA3-ydRhyLQ=s1600\",\n    \"desert\"  : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-yImnNgBpsFyIcqQ6Z4AGC0eXpothT8IDvS1qK6W3un1CXrpxgUfdGn5aBKh_wGq2CXx9LTcvkyS1ViE-TOQPZvgXGmRg=s1600\",\n    \"arctic\"  : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-x9fujdnfjDdgTdVqoV8KQwHDyUTuTDhvNoHBeRcf66ga_xzyyhNfpzrEoX5cb8F2F7GT2IafS0Ma85bLyLHX5K-yaung=s1600\",\n}\n\ndragon_urls_alt = { # TODO\n    \"volcano\" : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-x1iZPrYZ-HJoSbm0W3j6Mw2OdvyLi8azqXLqIHc4STwQYAx030ePYWrP93Y_cU9huu5L9v9rON75K8CXaogWkEQc2WMw=s1600\",\n    \"forest\"  : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-y4ghWSOyb1dOjOMnhqvpIJG1-3D3PzQamdvaH1IAc5qPQxLv10qmTUFOWX4ihNcIfD7u9DyBWw2iOnnJlpy9CC-NJITQ=s1600\",\n    \"ocean\"   : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-yxunUZqrokfrrIWLj63zLKL1mIev-4vngrSOT6eCQLC8RMN48IFWZh6bX1mK03TP9ze5obj02CVIC0wgPj_7Vs1S7yUQ=s1600\",\n    \"desert\"  : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-wTn-q2vl-vMr_3Tt37ZItDqk5Pl-XIwxPXF9jUiNPZLxqAWdwu2czmCvDpfO6CmfezzWS3M4bufegavnpIT2F7PGXDtg=s1600\",\n    \"arctic\"  : \"https://lh3.googleusercontent.com/drive-viewer/AITFw-wsBZE_wL3G81MbCNUaGg9bLWHbnxrvWCRhzixR8TakceCeDpF7tSOkz2xScM8E7FP0mQ8RyM_poBO_EvAHFUyFPZ7-AA=s1600\",\n}\n\ncolors = {\n    \"red\" : \"red\",\n    \"yellow\" : \"gold\",\n    \"blue\" : \"blue\",\n    \"green\" : \"green\",\n    \"fur\" : \"C0\",\n    \"feathers\" : \"C1\",\n    \"scales\" : \"C5\"\n}\n    \ndelta = 1 \nkappa = 0.05\nk1 = 1\nk2 = 1\neta = 200\n\n# general Euler method implementation\ndef euler_np(x_0, derivative, step, finalTime):\n    x = x_0\n    while finalTime > 0:\n        x = x + step*derivative(x) # single step\n        finalTime -= step\n    return x\n\ndef euler_step(x, derivative, step_size):\n    return x + step_size*derivative(x) # single step\n\ndef eval_setpoint(setpoint, x):\n    for k,v in setpoint.items():\n        if x[I[k]] < v[0]:\n            return False\n        if x[I[k]] > v[1]:\n            return False\n    return True\n\ndef server(input, output, session):\n    import numpy as np\n    import matplotlib.pyplot as plt\n    old_data = reactive.Value(None)\n\n    \n    def system(x):\n        global locale\n        global language\n        y = np.zeros_like(x)\n        # y = x\n        y[I[\"red\"]] = input.sunscreen()* input.f_hot()/50 - delta*x[I[\"red\"]] \n        y[I[\"yellow\"]] = input.sunscreen()*input.thermocline() - delta*x[I[\"yellow\"]] - eta*x[I[\"yellow\"]] * x[I[\"blue\"]]\n        y[I[\"blue\"]] = input.sunscreen()*input.humidity()/100 - delta*x[I[\"blue\"]] - eta*x[I[\"yellow\"]] * x[I[\"blue\"]]\n        y[I[\"green\"]] = eta*x[I[\"yellow\"]] * x[I[\"blue\"]] - delta*x[I[\"green\"]]\n        #\n        y[I[\"fur\"]] = input.diet()/1000 * k1 * (kappa/(kappa + x[I[\"red\"]] + x[I[\"yellow\"]] + x[I[\"blue\"]] + x[I[\"green\"]])) - delta*x[I[\"fur\"]]\n        y[I[\"feathers\"]] = input.diet()/1000 *2*x[I[\"green\"]] - delta*x[I[\"feathers\"]]\n        y[I[\"scales\"]] = input.diet()/1000 * (x[I[\"red\"]]+x[I[\"yellow\"]]+x[I[\"blue\"]])*k2 - delta * x[I[\"scales\"]]\n        return y\n\n    @output\n    @render.plot\n    #@render_widget\n    @reactive.event(input.run, input.env, ignore_none=True)\n    def plot():\n        global locale\n        global language\n        # simulation\n        global setpoints_dict\n        setpoints = setpoints_dict[input.env()]\n\n        x_0 = np.array([0,0,0,0,0,0,0])\n        euler_np(x_0, system, 0.01, 1)\n\n        xs = [x_0]\n        ts = 0.01\n        size = 1000\n        for i in range(size-1):\n            xs.append(euler_step(xs[-1], system, ts))\n\n        # plotting\n\n        import matplotlib as mpl\n        mpl.rcParams['figure.dpi'] = 300\n\n        fig = plt.figure()\n        \n        for (pos, l) in enumerate([\"red\", \"blue\", \"yellow\", \"green\"]):\n            ax = plt.subplot2grid((2,12), (0,pos*3), colspan=3)\n            ax.grid(True)\n            i = I[l]\n            ax.plot(np.linspace(0,1,size), [ x[i] for x in xs], label=f\"{l}\", color=colors[l])\n            ax.hlines(sum(setpoints[l])/2, 0, 1, color=colors[l], linestyle=\"dotted\")\n            ax.axhspan(setpoints[l][0], setpoints[l][1], 0, 1, facecolor=colors[l], alpha=0.2)\n            if pos==0:\n                ax.set_ylabel(locale[language][\"monitor_plots\"][\"expression\"])\n            #ax.legend()\n            ax.set_title(locale[language][\"colors/features\"][l])\n            ax.set_ylim((0,1.2))\n\n        \n        for (pos, l) in enumerate([\"fur\", \"feathers\", \"scales\"]):\n            ax = plt.subplot2grid((2,12), (1,pos*4), colspan=4)\n            ax.grid(True)\n            i = I[l]\n            ax.plot(np.linspace(0,1,size), [ x[i] for x in xs], label=f\"{l}\", color=colors[l])\n            ax.hlines(sum(setpoints[l])/2, 0, 1, color=colors[l], linestyle=\"dotted\")\n            ax.axhspan(setpoints[l][0], setpoints[l][1], 0, 1, facecolor=colors[l], alpha=0.2)\n            ax.set_xlabel(locale[language][\"monitor_plots\"][\"time\"])\n            if pos==0:\n                ax.set_ylabel(locale[language][\"monitor_plots\"][\"expression\"])\n            ax.set_title(locale[language][\"colors/features\"][l])\n            ax.set_ylim((0,1.2))\n\n        #fig.suptitle(\"**System's dynamics**\")\n        line = plt.Line2D((0.5,1),(-.5,-.5), color='k', linewidth=3)\n        fig.add_artist(line)\n        fig.tight_layout()\n        return fig   \n\n    @reactive.Effect\n    @reactive.event(input.show, ignore_none=True)\n    def _():\n        global locale\n        global language\n        global setpoints_dict\n        setpoints = setpoints_dict[input.env()]\n\n        global setpoints_dict_alt\n        setpoints_alt = setpoints_dict_alt[input.env()]\n\n        x_0 = np.array([0,0,0,0,0,0,0])\n        euler_np(x_0, system, 0.01, 1)\n\n        xs = [x_0]\n        ts = 0.01\n        size = 1000\n        for i in range(size-1):\n            xs.append(euler_step(xs[-1], system, ts))\n\n        if eval_setpoint(setpoints, xs[-1]):\n            global dragon_urls\n            m = ui.modal(\n                ui.HTML(f'<div style=\"text-align:center;background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\"><h3></h3><img src=\"{dragon_urls[input.env()]}\" alt=\"dragon\" style=\"width:80%;text-align:center;height:90%\"></div>'),\n                title=locale[language][\"modal\"][\"success\"],\n                easy_close=True,\n                footer=locale[language][\"modal\"][\"info\"],\n                size='l',\n                fade=False,\n                style=\"background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\",\n            )\n            ui.modal_show(m) \n        elif eval_setpoint(setpoints_alt, xs[-1]):\n            # add here alternative setpoints (if we make them)\n            global dragon_urls_alt\n            m = ui.modal(\n                ui.HTML(f'<div style=\"text-align:center;background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\"><h3></h3><img src=\"{dragon_urls_alt[input.env()]}\" alt=\"dragon\" style=\"width:80%;text-align:center;height:90%\"></div>'),\n                title=locale[language][\"modal\"][\"special\"],\n                easy_close=True,\n                footer=locale[language][\"modal\"][\"info\"],\n                size='l',\n                fade=False,\n                style=\"background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\",\n            )\n            ui.modal_show(m) \n        else: \n            m = ui.modal(\n                ui.HTML('<div style=\"text-align:center;background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\"><h3></h3><img src=\"https://lh3.googleusercontent.com/drive-viewer/AITFw-zRUCixU9Ub3CFs7y2iCwstJ4hW8Ol1qPVYXpX0Y8bYYAPq0T5f8nqjRik5RnWOnj5MQzf_wphFZJQiNSlYyPpEZhHomQ=s1600\" alt=\"EGG\" style=\"width:80%;text-align:center;height:90%\"></div>'),\n                title=locale[language][\"modal\"][\"failure\"],\n                easy_close=True,\n                footer=locale[language][\"modal\"][\"info\"],\n                size='l',\n                fade=False,\n                style=\"background-image:url(https://static.vecteezy.com/system/resources/previews/000/584/379/original/abstract-white-paper-textured-background-for-design-your-work-texture-vector.jpg)\",\n            )\n            ui.modal_show(m) \n        \n\n    @output\n    @render.text\n    @reactive.event(input.env, ignore_none=True)\n    def dragon_description():\n        global locale\n        global language\n        if input.env() is None:\n            return locale[language][\"environments\"][\"title\"]\n        else:\n            return locale[language][\"environments\"][input.env()] # add here the description of the environment\n\n\napp = App(app_ui, server)", "type": "text"}, {"name": "www/images/test.png", "content": "", "type": "binary"}]